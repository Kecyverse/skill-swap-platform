// This is your Prisma schema file.

// 1. A "generator" block tells Prisma how to generate the client.
// You don't need to change this.
generator client {
  provider = "prisma-client-js"
}

// 2. A "datasource" block tells Prisma how to connect to your database.
// It reads the URL from your .env file. You don't need to change this.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 3. These are your "models", which map to tables in your database.
// This is the core of your application's data structure.

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? // Profile Photo URL
  location      String?
  availability  String?   // "Weekends", "Evenings", etc.
  isPublic      Boolean   @default(true)
  isBanned      Boolean   @default(false) // For the admin stretch goal

  skillsOffered   UserSkillOffered[]
  skillsWanted    UserSkillWanted[]
  
  requestsMade    SwapRequest[] @relation("Requester")
  requestsReceived SwapRequest[] @relation("Requestee")

  // For NextAuth.js
  accounts      Account[]
  sessions      Session[]
}

model Skill {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  
  offeredBy   UserSkillOffered[]
  wantedBy    UserSkillWanted[]
}

// Explicit many-to-many join table for skills offered
model UserSkillOffered {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   Int
  
  @@id([userId, skillId])
}

// Explicit many-to-many join table for skills wanted
model UserSkillWanted {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   Int
  
  @@id([userId, skillId])
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED 
}

model SwapRequest {
  id          String      @id @default(cuid())
  status      SwapStatus  @default(PENDING)
  message     String?     
  
  requester   User     @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  
  requestee   User     @relation("Requestee", fields: [requesteeId], references: [id], onDelete: Cascade)
  requesteeId String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// Models required by NextAuth.js
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}